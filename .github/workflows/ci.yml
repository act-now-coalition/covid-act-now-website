name: Continuous Deployment
on:
  push:
  pull_request:
jobs:
  test:
    name: Test
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-

      # TODO: Discuss yarn vs. npm. I personally don't want to have to install yarn.
      # It's not needed for anything and only adds an additional
      # - name: Cache Node Modules
      #   uses: actions/cache@v1
      #   with:
      #     path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
      #     key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
      #     restore-keys: ${{ runner.os }}-node-

      - run: yarn install
      - run: yarn build:staging      
      - uses: ghop02/s3-sync-action@master
        with:
# We don't pass --delete so outdated assets will continue to be served. This ensures browsers with
# cached html files can still fetch the JS assets referred to.
          args: --acl public-read --follow-symlinks
        env:
          AWS_S3_BUCKET: 'covidactnow-testing'
          DEST_DIR: 'website-test/'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_MAX_CONCURRENT_REQUESTS: 100
          AWS_REGION: 'us-west-1'   # optional: defaults to us-east-1
          SOURCE_DIR: 'build/'      # optional: defaults to entire repository