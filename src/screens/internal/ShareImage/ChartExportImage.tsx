import React from 'react';
import { useParams } from 'react-router-dom';
import {
  ScreenshotWrapper,
  ChartWrapper,
  Content,
  Headers,
  LogoHolder,
  Location,
  MetricName,
  LastUpdated,
  Url,
} from './ChartExportImage.style';
import LogoUrlLight from 'assets/images/logoUrlLight';
import { MetricChart } from '../../../components/Charts';
import { ALL_METRICS, getMetricNameExtended } from 'common/metric';
import { Metric } from 'common/metricEnum';
import {
  useModelLastUpdatedDate,
  useProjectionsFromRegion,
} from 'common/utils/model';
import { formatUtcDate } from 'common/utils';
import { SCREENSHOT_CLASS } from 'components/Screenshot';
import { useRegionFromParams } from 'common/regions';

const ExportChartImage = () => {
  let { metric: metricString } = useParams<{ metric: string }>();
  const region = useRegionFromParams();
  const projections = useProjectionsFromRegion(region);
  const lastUpdated = useModelLastUpdatedDate();

  if (!projections || !lastUpdated || !region) {
    return null;
  }

  const metric = parseInt(metricString) as Metric;
  if (isNaN(metric) || !ALL_METRICS.includes(metric)) {
    return <h1>Unknown metric: {metricString}!</h1>;
  }

  const chartHeight = 415;
  let url = region.canonicalUrl;

  return (
    <ScreenshotWrapper className={SCREENSHOT_CLASS}>
      <Content>
        <Headers>
          <Location>{region.fullName}</Location>
          <MetricName>{getMetricNameExtended(metric)}</MetricName>
          <LastUpdated>Last updated {formatUtcDate(lastUpdated)} </LastUpdated>
        </Headers>
        <LogoHolder>
          Generated by
          <br />
          <LogoUrlLight height={15} />
        </LogoHolder>
        <ChartWrapper>
          <MetricChart
            metric={metric}
            projections={projections}
            height={chartHeight}
          />
        </ChartWrapper>
        <Url>{url}</Url>
      </Content>
    </ScreenshotWrapper>
  );
};

export default ExportChartImage;
